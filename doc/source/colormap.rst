Color maps
==========

A color map defines a relationship between scalar data values and a range of colors. 
Color maps are commonly used to generate false color images, color scatter-plot points, 
and illustrate the height of surface plots.

PyQtGraph's ColorMap object can also be used a convenient source of colors from a 
consistent palette or to generate QPen and QBrush objects used to draw lines and fills
that are colored according to their values along the horizontal or vertical axis.



Sources for color maps
----------------------

Color maps can be user defined by assigning a number of *stops* over the range of 0 to 1. A color is given for each stop, and the in-between values are generated by interpolation.

When map colors directly represent values, an improperly designed map can obscure detail over certain ranges of values, while creating false detail in others. PyQtGraph includes the perceptually uniform color maps provided by the `colorcet project` <https://colorcet.holoviz.org/>. Color maps can also be imported from the `colorcet` library or from `Matplotlib`, if either of these is installed.

To see all available color maps, please run the ColorMap demonstration available in the suite of :ref:`examples`.

Examples
--------

False color display of a 2D data set. Display levels are controlled by 
a :class:`ColorBarItem <pyqtgraph.ColorBarItem>`:

.. code-block:: python

    # prepare demonstration data:
    data = np.fromfunction(lambda i, j: (1+0.3*np.sin(i)) * (i)**2 + (j)**2, (100, 100))
    noisy_data = data * (1 + 0.2 * np.random.random(data.shape) )

    # Example: False color image with interactive level adjustment
    img = pg.ImageItem(image=noisy_data) # create monochrome image from demonstration data
    plot.addItem( img )            # add to PlotItem 'plot'
    cm = pg.colormap.get('CET-L9') # prepare a linear color map
    bar = pg.ColorBarItem( values= (0, 20_000), cmap=cm ) # prepare interactive color bar
    # Set up ColorBarItem to control colors of img and appear in 'plot':
    bar.setImageItem( img, insert_in=plot ) 

Using `QtGui.QPen` and `QtGui.QBrush` to color plots according to the plotted value:

.. code-block:: python

    # prepare demonstration data:
    raw = np.linspace(0.0, 2.0, 400)
    y_data1 = ( (raw+0.1)%1 ) ** 4
    y_data2 = ( (raw+0.1)%1 ) ** 4 - ( (raw+0.6)%1 ) ** 4

    # Example 1: Gradient pen
    cm = pg.colormap.get('CET-L17') # prepare a linear color map
    cm.reverse()                    # reverse it to put light colors at the top 
    pen = cm.getPen( span=(0.0,1.0), width=5 )     # gradient from blue (y=0) to white (y=1)
    # plot a curve drawn with a pen colored according to y value:
    curve1 = pg.PlotDataItem( y=y_data1, pen=pen ) 

    # Example 2: Gradient brush
    cm = pg.colormap.get('CET-D1') # prepare a diverging color map
    cm.setMappingMode('diverging') # set mapping mode
    brush = cm.getBrush( span=(-1., 1.) ) # gradient from blue at -1 to red at +1
    # plot a curve that is filled to zero with the gradient brush:
    curve2 = pg.PlotDataItem( y=y_data2, pen='w', brush=brush, fillLevel=0.0 )


.. image:: 
    images/example_false_color_image.png
    :width: 49%

.. image::
    images/example_gradient_plot.png
    :width: 49%


API Reference
-------------

.. autofunction:: pyqtgraph.colormap.listMaps

.. autofunction:: pyqtgraph.colormap.get

.. autofunction:: pyqtgraph.colormap.getFromMatplotlib

.. autofunction:: pyqtgraph.colormap.getFromColorcet



.. autoclass:: pyqtgraph.ColorMap
    :members:

    .. automethod:: pyqtgraph.ColorMap.__init__
